AWSTemplateFormatVersion: '2010-09-09'
Resources:
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: input-project

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: project-outpu

  ProcessVideoLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: process-video-lambda
      Handler: index.handler
      Role: !GetAtt ProcessVideoLambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 300
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const batch = new AWS.Batch();

          exports.handler = async (event, context) => {
            try {
              const inputBucket = event.Records[0].s3.bucket.name;
              const inputKey = event.Records[0].s3.object.key;
              const outputBucket = 'output-bucket-name';
              const outputPrefix = 'frames/';

              const createJobResponse = await batch.createJob({
                jobName: 'video-processing-job',
                jobDefinition: 'video-processing-job-definition',
                jobQueue: 'video-processing-job-queue',
                containerOverrides: {
                  environment: [
                    { name: 'INPUT_BUCKET', value: inputBucket },
                    { name: 'INPUT_KEY', value: inputKey },
                    { name: 'OUTPUT_BUCKET', value: outputBucket },
                    { name: 'OUTPUT_PREFIX', value: outputPrefix }
                  ]
                }
              }).promise();

              console.log('Batch job created:', createJobResponse);

              return {
                statusCode: 200,
                body: 'Batch job created successfully.'
              };
            } catch (error) {
              console.error('Error starting Batch job:', error);
              return {
                statusCode: 500,
                body: 'Error starting Batch job.'
              };
            }
          };

      Environment:
        Variables:
          BATCH_JOB_DEFINITION: video-processing-job-definition
          BATCH_JOB_QUEUE: video-processing-job-queue

  ProcessVideoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: process-video-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${InputBucket}/*'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
        - PolicyName: batch-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                Resource: '*'

  VideoProcessingJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: video-processing-job-definition
      Type: container
      Parameters:
        - Name: INPUT_BUCKET
          Type: String
        - Name: INPUT_KEY
          Type: String
        - Name: OUTPUT_BUCKET
          Type: String
        - Name: OUTPUT_PREFIX
          Type: String
      ContainerProperties:
        Image: your-video-processing-image
        Vcpus: 1
        Memory: 2048
        Command:
          - /bin/sh
          - -c
          - 'ffmpeg -i s3://${INPUT_BUCKET}/${INPUT_KEY} -vf "select=not(mod(n\,900)),setpts=N/FRAME_RATE/TB" -r 1/30 s3://${OUTPUT_BUCKET}/${OUTPUT_PREFIX}%04d.png'

  VideoProcessingJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: video-processing-job-queue
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: your-compute-environment
